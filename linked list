#include<stdio.h>
#include<malloc.h>
typedef struct LNode *List;
struct LNode{
	int Data;
	List Next;
};
List PtrL;

int Length(List PtrL){
	List p=PtrL;
	int j=0;
	while(p){   //p²»Îª¿Õ£¡ 
		p=p->Next;
		j++; 
	}
	return j; 
}
List FindKth(int K,List PtrL){//²éÕÒÐòºÅ 
	List p=PtrL;
	int i=1;
	while(p!=NULL&&i<K){
		p=p->Next;
		i++;
	} 
	if(i==K){
		return p;
	}else{
		return NULL;
	}
}
List Find(int X,List PtrL){//
	List p=PtrL;
	while(p!=NULL&&p->Data!=X){
		p=p->Next;
	}
	return p;
}
//²åÈë
List Insert(int X,int i,List PtrL){
	List p,s;
	if(i==1){                                    //Èç¹û²åÈëÔÚ±íÍ·£¬ 
		s=(List)malloc(sizeof(struct LNode));	 //ÄÚ´æÉêÇë 
		s->Data=X;
		s->Next=PtrL;
	}
	p=FindKth(i-1,PtrL); 
	if(p==NULL){
		printf("²ÎÊý´íÎó£¬²»ÄÜ²åÈë");
		return NULL; 
	}else{
		s=(List)malloc(sizeof(struct LNode));
		s->Data=X;
		s->Next=p->Next;
		p->Next=s;
		return PtrL;
	}
} 
List Delete(int i,List PtrL){
	List p,s;									////Èç¹ûÉ¾³ý±íÍ·Node 
	if(i==1){
		s=PtrL;
		if(PtrL==NULL) PtrL=PtrL->Next;
		else return NULL;
		free(s);
		return PtrL; 
	}
	p=FindKth(i-1,PtrL);
	if(p==NULL){
		printf("µÚ%d¸ö½Úµã²»´æÔÚ",i-1);
		return NULL;
	}else if(p->Next==NULL){
		printf("µÚ%d¸ö½Úµã²»´æÔÚ",i); 
		return NULL;
	}else{
		s=p->Next;
		p->Next=s->Next;
		free(s);
		return PtrL;
	}
}
int main(void){
	//test
}  
